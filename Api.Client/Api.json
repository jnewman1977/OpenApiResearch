{
  "openapi": "3.0.1",
  "info": {
    "title": "Open API Research",
    "description": "An ASP.NET Core Web API for research",
    "version": "v1"
  },
  "paths": {
    "/UserGroup": {
      "get": {
        "tags": [
          "UserGroup"
        ],
        "summary": "Gets a list of user groups.",
        "description": "Sample Response:\r\n\r\n    GET /UserGroup\r\n    [\r\n        {\r\n            \"id\": \"633df04e03cb9fd96d1f696b\",\r\n            \"name\": \"Group Qualitern\",\r\n            \"users\": [\r\n                {\r\n                    \"id\": \"633df04ed221191ceadbffdf\",\r\n                    \"name\": \"Rivas Keith\",\r\n                    \"email\": \"rkeith@gmail.com\",\r\n                    \"firstName\": \"Rivas\",\r\n                    \"lastName\": \"Keith\"\r\n                }\r\n            ]\r\n        }\r\n    ]",
        "responses": {
          "200": {
            "description": "Results returned with no errors.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserGroup"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized."
          }
        }
      }
    },
    "/UserGroup/{id}/users": {
      "get": {
        "tags": [
          "UserGroup"
        ],
        "summary": "Gets a list of users for the given group.",
        "description": "Sample Response:\r\n\r\n    GET /UserGroup/{id}/Users\r\n    [\r\n            {\r\n                \"id\": \"633df04ed221191ceadbffdf\",\r\n                \"name\": \"Rivas Keith\",\r\n                \"email\": \"rkeith@gmail.com\",\r\n                \"firstName\": \"Rivas\",\r\n                \"lastName\": \"Keith\"\r\n            }\r\n    ]",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The group id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Results returned with no errors.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "204": {
            "description": "No records found."
          },
          "401": {
            "description": "Unauthorized."
          }
        }
      }
    },
    "/UserGroup/{id}/create": {
      "post": {
        "tags": [
          "UserGroup"
        ],
        "summary": "Creates a new user in the given user group.",
        "description": "Sample Request:\r\n            \r\n    POST /UserGroup/{id}/Create\r\n    {\r\n        \"name\": \"Fred Flinstone\",\r\n        \"email\": \"FredFlinstone@gmail.com\",\r\n        \"firstName\": \"Fred\",\r\n        \"lastName\": \"Flinstone\"\r\n    }",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The System.String id of the user group.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The Api.Models.User to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User created successfully with no errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "Unauthorized."
          }
        }
      }
    },
    "/WeatherForecast": {
      "get": {
        "tags": [
          "WeatherForecast"
        ],
        "operationId": "GetWeatherForecast",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WeatherForecast"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WeatherForecast"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WeatherForecast"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WeatherForecast": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "temperatureC": {
            "type": "integer",
            "format": "int32"
          },
          "temperatureF": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "summary": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}